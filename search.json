[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 klassets authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"set-1-the-original","dir":"Articles","previous_headings":"The sets","what":"Set 1: The original","title":"Quasi Anscombe data sets","text":"","code":"# df <- sim_quasianscombe_set_1()  df <- sim_quasianscombe_set_1(n = 100, x_sd = 5)  plot(df) +   # xlim(0, NA) +   # ylim(0, NA) +   labs(subtitle = \"Original data set\")"},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"set-4-no-linear-relationship","dir":"Articles","previous_headings":"The sets","what":"Set 4: No linear relationship","title":"Quasi Anscombe data sets","text":"","code":"func <- function(x) { 2 * x^2  }  df2_1 <- sim_quasianscombe_set_2(df, residual_factor = 0, fun = func)  funktion <- function(x){ 2 * sin(x*diff(range(x))) }  df2_2 <- sim_quasianscombe_set_2(df, fun = funktion)"},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"set-3-outliers","dir":"Articles","previous_headings":"The sets","what":"Set 3: Outliers","title":"Quasi Anscombe data sets","text":"","code":"df3_1 <- sim_quasianscombe_set_3(df, prop = 0.1)  df3_2 <- sim_quasianscombe_set_3(df, prop = 0.1, residual_factor = 0)"},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"set-4-cluster","dir":"Articles","previous_headings":"The sets","what":"Set 4: Cluster","title":"Quasi Anscombe data sets","text":"","code":"df4_1 <- sim_quasianscombe_set_4(df, prop = 0.25)  df4_2 <- sim_quasianscombe_set_4(df, rescale_to = c(0, .1), prop = 0.5)"},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"set-5-heteroskedasticity","dir":"Articles","previous_headings":"The sets","what":"Set 5: Heteroskedasticity","title":"Quasi Anscombe data sets","text":"","code":"df5_1 <- sim_quasianscombe_set_5(df, residual_factor = 2)  df5_2 <- sim_quasianscombe_set_5(df, fun = function(x) rev(x**2))"},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"set-6-simpsons-paradox","dir":"Articles","previous_headings":"The sets","what":"Set 6: Simpson’s Paradox","title":"Quasi Anscombe data sets","text":"","code":"df6_1 <- sim_quasianscombe_set_6(df, residual_factor = 1)  df6_2 <- sim_quasianscombe_set_6(df, b1_factor = 0, residual_factor = 0.1)"},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"compare-results","dir":"Articles","previous_headings":"","what":"Compare results","title":"Quasi Anscombe data sets","text":"[@warnes](https://github.com/warnes) gtools package","code":"library(dplyr, warn.conflicts = FALSE) library(tidyr) library(purrr) library(broom)  dfs <- list(   \"Original\" = df,   \"Set 2 v1\" = df2_1,   \"Set 2 v2\" = df2_2,   \"Set 3 v1\" = df3_1,   \"Set 3 v2\" = df3_2,   \"Set 4 v1\" = df4_1,   \"Set 4 v2\" = df4_2,   \"Set 5 v1\" = df5_1,   \"Set 5 v2\" = df5_2,   \"Set 6 v1\" = df6_1,   \"Set 6 v2\" = df6_2 )  dfs <- dfs |>    tibble::enframe(name = \"set\") |>    tidyr::unnest(cols = c(value)) stars.pval <- function(p.value) {   unclass(     symnum(p.value,       corr = FALSE, na = FALSE,       cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),       symbols = c(\"***\", \"**\", \"*\", \".\", \" \")     )   ) }"},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"visually","dir":"Articles","previous_headings":"","what":"Visually","title":"Quasi Anscombe data sets","text":"","code":"pxy <- ggplot(dfs, aes(x, y)) +   geom_point(shape = 21, fill = \"gray80\", color = \"gray60\") +   geom_smooth(method = \"lm\", se = FALSE, formula = y ~ x) +   facet_wrap(vars(set))  pxy"},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"coefficients-and-its-significance","dir":"Articles","previous_headings":"","what":"Coefficients and its significance","title":"Quasi Anscombe data sets","text":"","code":"df_mods <- dfs |>    dplyr::group_nest(set) |>    dplyr::mutate(     model = map(data, lm, formula = y ~ x),     parameters = map(model, broom::tidy)     # value = map(model, coefficients),     # coef  = map(value, names)     )   df_mods |>    dplyr::select(set, parameters) |>    tidyr::unnest(cols = c(parameters)) |>    dplyr::mutate(sig = stars.pval(p.value)) |>    dplyr::select(set, term, estimate) |>    tidyr::pivot_wider(names_from = \"term\", values_from = \"estimate\") #> # A tibble: 11 × 3 #>    set      `(Intercept)`     x #>    <chr>            <dbl> <dbl> #>  1 Original          2.96 0.496 #>  2 Set 2 v1          2.96 0.495 #>  3 Set 2 v2          2.96 0.496 #>  4 Set 3 v1          2.96 0.496 #>  5 Set 3 v2          2.96 0.496 #>  6 Set 4 v1          2.96 0.496 #>  7 Set 4 v2          2.96 0.496 #>  8 Set 5 v1          2.96 0.496 #>  9 Set 5 v2          2.96 0.496 #> 10 Set 6 v1          2.96 0.496 #> 11 Set 6 v2          2.96 0.496"},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"animated-version","dir":"Articles","previous_headings":"","what":"Animated version","title":"Quasi Anscombe data sets","text":"","code":"library(gganimate) #> No renderer backend detected. gganimate will default to writing frames to separate files #> Consider installing: #> - the `gifski` package for gif output #> - the `av` package for video output #> and restarting the R session library(stringr)  dfs <- dfs |>    mutate(     set = str_replace_all(set, \"Set 2\", \"No linear relationship\"),     set = str_replace_all(set, \"Set 3\", \"Extreme values (outliers)\"),     set = str_replace_all(set, \"Set 4\", \"Cluster\"),     set = str_replace_all(set, \"Set 5\", \"Heteroskedasticity\"),     set = str_replace_all(set, \"Set 6\", \"Simpson's Paradox\"),     set = forcats::fct_inorder(set)     )  ggplot(dfs, aes(x, y)) +   geom_point(shape = 21, fill = \"gray80\", color = \"gray60\") +   geom_smooth(method = \"lm\", se = FALSE, formula = y ~ x) +   facet_null() +    # then animate   labs(     title = \"Iteration {closest_state}\",     # caption = \"Frame {frame} of {nframes}\"     caption = \"Quasi Anscombe sets\\n(only keep the regresion coefficients, and sometimes the mean of x's)\"     ) +   ease_aes(\"cubic-in-out\") +   # shadow_wake(wake_length = 0.2, alpha = 0.1) +   transition_states(set, transition_length = 2, state_length = 1) #> NULL"},{"path":"/articles/Quasi-Anscombe-data-sets.html","id":"residuals","dir":"Articles","previous_headings":"","what":"Residuals","title":"Quasi Anscombe data sets","text":"Comming soon.","code":"# df_mods |> #   pull(model) |> #   map(pluck, \"residuals\") |> #   map(plot)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua Kunst. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kunst J (2022). klassets: Tools simulate data set teach Statical Models ML Algorithms. https://jkunst.com/klassets/, https://github.com/jbkunst/klassets.","code":"@Manual{,   title = {klassets: Tools to simulate data set to teach Statical Models and ML Algorithms},   author = {Joshua Kunst},   year = {2022},   note = {https://jkunst.com/klassets/, https://github.com/jbkunst/klassets}, }"},{"path":"/index.html","id":"klassets","dir":"","previous_headings":"","what":"Tools to simulate data set to teach Statical Models and ML Algorithms","title":"Tools to simulate data set to teach Statical Models and ML Algorithms","text":"goal klasset …","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools to simulate data set to teach Statical Models and ML Algorithms","text":"can install development version klasset GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jbkunst/klasset\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tools to simulate data set to teach Statical Models and ML Algorithms","text":"basic example shows solve common problem:","code":"library(klasset) ## basic example code"},{"path":"/reference/sim_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data sets to apply a clustering algorithm — sim_clusters","title":"Generate data sets to apply a clustering algorithm — sim_clusters","text":"Generate data sets apply clustering algorithm","code":""},{"path":"/reference/sim_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data sets to apply a clustering algorithm — sim_clusters","text":"","code":"sim_clusters(n = 1000, groups = 3, props = NULL, add_group_col = FALSE)"},{"path":"/reference/sim_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data sets to apply a clustering algorithm — sim_clusters","text":"n intenger groups integer props vector probabilties length groups. add_group_col logical value.","code":""},{"path":"/reference/sim_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data sets to apply a clustering algorithm — sim_clusters","text":"","code":"set.seed(123456)  df <- sim_clusters()  plot(df)   set.seed(123456)  df <- sim_clusters(add_group_col = TRUE)  plot(df)"},{"path":"/reference/sim_quasianscombe_set_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate quasi Anscombe data sets Type 1 — sim_quasianscombe_set_1","title":"Generate quasi Anscombe data sets Type 1 — sim_quasianscombe_set_1","text":"function generate data set Type 1  creating first x random vector apply linear transformation using beta0 beta1 finally adding normal distributed noise using error_sd creating y values.","code":""},{"path":"/reference/sim_quasianscombe_set_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate quasi Anscombe data sets Type 1 — sim_quasianscombe_set_1","text":"","code":"sim_quasianscombe_set_1(   n = 100,   beta0 = 3,   beta1 = 0.5,   error_sd = 0.5,   x_mean = 5,   x_sd = 1,   x_dist = \"norm\" )"},{"path":"/reference/sim_quasianscombe_set_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate quasi Anscombe data sets Type 1 — sim_quasianscombe_set_1","text":"n n, default value: 100 beta0 beta0, default value: 3, beta1 beta1, default value: 0.5 error_sd error_sd, default value: 0.1 x_mean x_mean, default value: 5 x_sd x_sd, default value: 1 x_dist x_dist, default value: \"norm\"","code":""},{"path":"/reference/sim_quasianscombe_set_1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate quasi Anscombe data sets Type 1 — sim_quasianscombe_set_1","text":"typical example regression analysis taught.","code":""},{"path":"/reference/sim_quasianscombe_set_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate quasi Anscombe data sets Type 1 — sim_quasianscombe_set_1","text":"","code":"df <- sim_quasianscombe_set_1()  df #> # A tibble: 100 × 2 #>        x     y #>    <dbl> <dbl> #>  1  2.76  4.60 #>  2  2.94  4.25 #>  3  3.05  5.00 #>  4  3.24  3.97 #>  5  3.30  4.04 #>  6  3.36  4.66 #>  7  3.44  4.18 #>  8  3.48  5.29 #>  9  3.53  4.71 #> 10  3.64  4.23 #> # … with 90 more rows  plot(df)   plot(sim_quasianscombe_set_1(n = 1000))   plot(sim_quasianscombe_set_1(error_sd = 0))   plot(sim_quasianscombe_set_1(x_sd = 0))"},{"path":"/reference/sim_quasianscombe_set_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate quasi Anscombe data sets Type 2 — sim_quasianscombe_set_2","title":"Generate quasi Anscombe data sets Type 2 — sim_quasianscombe_set_2","text":"Data sets Type 2 shows linear realtionship x y can lead regression model (terms parameter values) Type 1.","code":""},{"path":"/reference/sim_quasianscombe_set_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate quasi Anscombe data sets Type 2 — sim_quasianscombe_set_2","text":"","code":"sim_quasianscombe_set_2(   df,   fun = function(x) {     x^2 },   residual_factor = 0.25 )"},{"path":"/reference/sim_quasianscombe_set_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate quasi Anscombe data sets Type 2 — sim_quasianscombe_set_2","text":"df data frame sim_quasianscombe_set_1 (similar). fun function apply, applied normalized version x. residual_factor Numeric value multiply residual modify variance.","code":""},{"path":"/reference/sim_quasianscombe_set_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate quasi Anscombe data sets Type 2 — sim_quasianscombe_set_2","text":"","code":"df <- sim_quasianscombe_set_1()  dataset2 <- sim_quasianscombe_set_2(df)  dataset2 #> # A tibble: 100 × 2 #>        x     y #>    <dbl> <dbl> #>  1  3.17  8.12 #>  2  3.22  8.19 #>  3  3.22  7.96 #>  4  3.25  7.82 #>  5  3.27  7.91 #>  6  3.53  6.92 #>  7  3.64  6.29 #>  8  3.76  6.17 #>  9  3.88  5.85 #> 10  3.95  5.40 #> # … with 90 more rows  plot(dataset2)   plot(sim_quasianscombe_set_2(df, residual_factor = 0))   fun1 <- function(x){ 2 * sin(x*diff(range(x))) }  plot(sim_quasianscombe_set_2(df, fun = fun1))   fun2 <- abs  plot(sim_quasianscombe_set_2(df, fun = fun2))   fun3 <- function(x){ (x - mean(x)) * sin(x*diff(range(x))) }  plot(sim_quasianscombe_set_2(df, fun = fun3))"},{"path":"/reference/sim_quasianscombe_set_3.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate quasi Anscombe data sets Type 3 — sim_quasianscombe_set_3","title":"Generate quasi Anscombe data sets Type 3 — sim_quasianscombe_set_3","text":"Data sets Type 3 get outliers conserving $x$ mean coefficients -different significance- adjusted linear model.","code":""},{"path":"/reference/sim_quasianscombe_set_3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate quasi Anscombe data sets Type 3 — sim_quasianscombe_set_3","text":"","code":"sim_quasianscombe_set_3(   df,   prop = 0.05,   beta1_factor = 0.5,   residual_factor = 0.25 )"},{"path":"/reference/sim_quasianscombe_set_3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate quasi Anscombe data sets Type 3 — sim_quasianscombe_set_3","text":"df data frame sim_quasianscombe_set_1 (similar). prop proportion value modify outliers. beta1_factor Numeric value modify beta1 value. residual_factor Numeric value multiply residual modify variance.","code":""},{"path":"/reference/sim_quasianscombe_set_3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate quasi Anscombe data sets Type 3 — sim_quasianscombe_set_3","text":"function : Calculate linear regression model calculate new trend using 0.5 times beta1 Take prop% values greater 2*prop x values modify related y value get original estimation beta1 Apply residual_factor factor residual get minor variance better visual impression outliers effect.","code":""},{"path":"/reference/sim_quasianscombe_set_3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate quasi Anscombe data sets Type 3 — sim_quasianscombe_set_3","text":"","code":"df <- sim_quasianscombe_set_1()  dataset3 <- sim_quasianscombe_set_3(df)  dataset3 #> # A tibble: 100 × 2 #>        x     y #>    <dbl> <dbl> #>  1  2.83  4.63 #>  2  3.09  4.57 #>  3  3.28  4.61 #>  4  3.36  4.85 #>  5  3.50  5.12 #>  6  3.70  4.81 #>  7  3.74  4.83 #>  8  3.78  5.07 #>  9  3.80  4.81 #> 10  3.84  5.05 #> # … with 90 more rows  plot(dataset3)   plot(sim_quasianscombe_set_3(df, prop = 0.1, residual_factor = 0))"},{"path":"/reference/sim_quasianscombe_set_4.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate quasi Anscombe data sets Type 4 — sim_quasianscombe_set_4","title":"Generate quasi Anscombe data sets Type 4 — sim_quasianscombe_set_4","text":"Data sets Type 4 recreate two cluster keeping coefficient original regression model.","code":""},{"path":"/reference/sim_quasianscombe_set_4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate quasi Anscombe data sets Type 4 — sim_quasianscombe_set_4","text":"","code":"sim_quasianscombe_set_4(df, rescale_to = c(0.1, 0.2), prop = 0.15)"},{"path":"/reference/sim_quasianscombe_set_4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate quasi Anscombe data sets Type 4 — sim_quasianscombe_set_4","text":"df data frame sim_quasianscombe_set_1 (similar). rescale_to Rescale x value create second cluster. prop proportion value modify second group/cluster.","code":""},{"path":"/reference/sim_quasianscombe_set_4.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate quasi Anscombe data sets Type 4 — sim_quasianscombe_set_4","text":"function : Disorder order x values. Rescale x value specific original quantiles. take porportion value traslate left keeppping original mean x. Finally add value associated y value substract complement group regression model term coefficients.","code":""},{"path":"/reference/sim_quasianscombe_set_4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate quasi Anscombe data sets Type 4 — sim_quasianscombe_set_4","text":"","code":"df <- sim_quasianscombe_set_1()  dataset4 <- sim_quasianscombe_set_4(df)  dataset4 #> # A tibble: 100 × 2 #>        x     y #>    <dbl> <dbl> #>  1  3.70  6.29 #>  2  3.74  6.17 #>  3  3.74  4.68 #>  4  3.77  5.50 #>  5  3.83  4.02 #>  6  3.83  5.18 #>  7  3.84  5.48 #>  8  3.85  5.29 #>  9  3.85  5.18 #> 10  3.86  4.65 #> # … with 90 more rows  plot(dataset4)   plot(sim_quasianscombe_set_4(df, rescale_to = c(0, .1), prop = 0.5))"},{"path":"/reference/sim_quasianscombe_set_5.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate quasi Anscombe data sets Type 5 — sim_quasianscombe_set_5","title":"Generate quasi Anscombe data sets Type 5 — sim_quasianscombe_set_5","text":"Data sets Type 5 recreates phenomenon heteroskedasticity residuals.","code":""},{"path":"/reference/sim_quasianscombe_set_5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate quasi Anscombe data sets Type 5 — sim_quasianscombe_set_5","text":"","code":"sim_quasianscombe_set_5(df, fun = identity, residual_factor = 10)"},{"path":"/reference/sim_quasianscombe_set_5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate quasi Anscombe data sets Type 5 — sim_quasianscombe_set_5","text":"df data frame sim_quasianscombe_set_1 (similar). fun function apply index multiply residuals original model. residual_factor Numeric value multiply residual modify variance.","code":""},{"path":"/reference/sim_quasianscombe_set_5.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate quasi Anscombe data sets Type 5 — sim_quasianscombe_set_5","text":"function take residuals $e_i$ get $e'_i = e_i * fun()$ rescale $e'_i$ range $e_i$.","code":""},{"path":"/reference/sim_quasianscombe_set_5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate quasi Anscombe data sets Type 5 — sim_quasianscombe_set_5","text":"","code":"df <- sim_quasianscombe_set_1()  dataset5 <- sim_quasianscombe_set_5(df)  dataset5 #> # A tibble: 100 × 2 #>        x     y #>    <dbl> <dbl> #>  1  3.18  4.61 #>  2  3.26  4.74 #>  3  3.29  4.61 #>  4  3.39  4.72 #>  5  3.44  4.82 #>  6  3.44  5.10 #>  7  3.68  5.19 #>  8  3.76  4.68 #>  9  3.82  4.99 #> 10  3.82  4.85 #> # … with 90 more rows  plot(dataset5)   plot(sim_quasianscombe_set_5(df, fun = rev))   plot(sim_quasianscombe_set_5(df, fun = sqrt))   plot(sim_quasianscombe_set_5(df, fun = log))   plot(sim_quasianscombe_set_5(df, fun = function(x) x^(1+0.6)))"},{"path":"/reference/sim_quasianscombe_set_6.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate quasi Anscombe data sets Type 6 — sim_quasianscombe_set_6","title":"Generate quasi Anscombe data sets Type 6 — sim_quasianscombe_set_6","text":"Data sets Type 6 recreates phenomenon Simpon's paradox.","code":""},{"path":"/reference/sim_quasianscombe_set_6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate quasi Anscombe data sets Type 6 — sim_quasianscombe_set_6","text":"","code":"sim_quasianscombe_set_6(df, groups = 3, b1_factor = -1, residual_factor = 0.25)"},{"path":"/reference/sim_quasianscombe_set_6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate quasi Anscombe data sets Type 6 — sim_quasianscombe_set_6","text":"df data frame sim_quasianscombe_set_1 (similar). groups Number groups separate x values. b1_factor numeric value get slope group $beta_1$. residual_factor Numeric value multiply residual modify variance.","code":""},{"path":"/reference/sim_quasianscombe_set_6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate quasi Anscombe data sets Type 6 — sim_quasianscombe_set_6","text":"function take x vector separate groups groups apply local model modified regresion using b1_factor factor. residual multiply value 0 1 make visual effect greater.","code":""},{"path":"/reference/sim_quasianscombe_set_6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate quasi Anscombe data sets Type 6 — sim_quasianscombe_set_6","text":"","code":"df <- sim_quasianscombe_set_1()  dataset6 <- sim_quasianscombe_set_6(df)  dataset6 #> # A tibble: 100 × 2 #>        x     y #>    <dbl> <dbl> #>  1  2.76  5.48 #>  2  3.08  5.36 #>  3  3.33  5.08 #>  4  3.40  5.02 #>  5  3.54  4.93 #>  6  3.67  4.93 #>  7  3.70  4.93 #>  8  3.73  4.76 #>  9  3.78  4.91 #> 10  3.84  5.01 #> # … with 90 more rows  plot(dataset6)"}]
